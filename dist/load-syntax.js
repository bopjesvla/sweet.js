"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.sanitizeReplacementValues = sanitizeReplacementValues;

var _ramda = require("ramda");

var _ = _interopRequireWildcard(_ramda);

var _termExpander = require("./term-expander");

var _termExpander2 = _interopRequireDefault(_termExpander);

var _immutable = require("immutable");

var _parseReducer = require("./parse-reducer.js");

var _parseReducer2 = _interopRequireDefault(_parseReducer);

var _shiftReducer = require("shift-reducer");

var _shiftReducer2 = _interopRequireDefault(_shiftReducer);

var _serializer = require("./serializer");

var _syntax = require("./syntax");

var _syntax2 = _interopRequireDefault(_syntax);

var _shiftCodegen = require("shift-codegen");

var _shiftCodegen2 = _interopRequireDefault(_shiftCodegen);

var _transforms = require("./transforms");

var _terms = require("./terms");

var _terms2 = _interopRequireDefault(_terms);

var _shiftReader = require("./shift-reader");

var _shiftReader2 = _interopRequireDefault(_shiftReader);

var _macroContext = require("./macro-context");

var _templateProcessor = require("./template-processor");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

var geval_309 = eval;
function sanitizeReplacementValues(values_312) {
  if (Array.isArray(values_312)) {
    return sanitizeReplacementValues((0, _immutable.List)(values_312));
  } else if (_immutable.List.isList(values_312)) {
    return values_312.map(sanitizeReplacementValues);
  } else if (values_312 == null) {
    throw new Error("replacement values for syntax template must not be null or undefined");
  } else if (typeof values_312.next === "function") {
    return sanitizeReplacementValues((0, _immutable.List)(values_312));
  }
  return (0, _macroContext.unwrap)(values_312);
}
function loadForCompiletime_310(expr_313, context_314) {
  var deserializer_315 = (0, _serializer.makeDeserializer)(context_314.bindings);
  var sandbox_316 = { syntaxQuote: function syntaxQuote(strings_323) {
      for (var _len = arguments.length, values_322 = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        values_322[_key - 1] = arguments[_key];
      }

      var ctx_324 = deserializer_315.read(_.last(values_322));
      var reader_325 = new _shiftReader2.default(strings_323, ctx_324.context, _.take(values_322.length - 1, values_322));
      return reader_325.read();
    }, syntaxTemplate: function syntaxTemplate(str_327) {
      for (var _len2 = arguments.length, values_326 = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
        values_326[_key2 - 1] = arguments[_key2];
      }

      return (0, _templateProcessor.replaceTemplate)(deserializer_315.read(str_327), sanitizeReplacementValues(values_326));
    } };
  var sandboxKeys_317 = (0, _immutable.List)(Object.keys(sandbox_316));
  var sandboxVals_318 = sandboxKeys_317.map(function (k_328) {
    return sandbox_316[k_328];
  }).toArray();
  var parsed_319 = (0, _shiftReducer2.default)(new _parseReducer2.default(), new _terms2.default("Module", { directives: (0, _immutable.List)(), items: _immutable.List.of(new _terms2.default("ExpressionStatement", { expression: new _terms2.default("FunctionExpression", { isGenerator: false, name: null, params: new _terms2.default("FormalParameters", { items: sandboxKeys_317.map(function (param_329) {
            return new _terms2.default("BindingIdentifier", { name: _syntax2.default.fromIdentifier(param_329) });
          }), rest: null }), body: new _terms2.default("FunctionBody", { directives: _immutable.List.of(new _terms2.default("Directive", { rawValue: "use strict" })), statements: _immutable.List.of(new _terms2.default("ReturnStatement", { expression: expr_313 })) }) }) })) }));
  var gen_320 = (0, _shiftCodegen2.default)(parsed_319, new _shiftCodegen.FormattedCodeGen());
  var result_321 = context_314.transform(gen_320, { babelrc: true, filename: context_314.filename });
  return geval_309(result_321.code).apply(undefined, sandboxVals_318);
}
var loadSyntax_311 = _.cond([[_.where({ binding: _terms.isBindingIdentifier }), _.curry(function (_ref, context_330, env_331) {
  var binding = _ref.binding;
  var init = _ref.init;

  var termExpander_332 = new _termExpander2.default(context_330);
  var initValue_333 = loadForCompiletime_310(termExpander_332.expand(init), context_330);
  env_331.set(binding.name.resolve(), new _transforms.CompiletimeTransform(initValue_333));
})], [_.T, function (__334) {
  return assert(false, "not implemented yet");
}]]);
exports.default = loadSyntax_311;
//# sourceMappingURL=data:application/json;base64,