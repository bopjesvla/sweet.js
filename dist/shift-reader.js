"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _tokenizer = require("shift-parser/dist/tokenizer");

var _tokenizer2 = _interopRequireDefault(_tokenizer);

var _immutable = require("immutable");

var _syntax = require("./syntax");

var _syntax2 = _interopRequireDefault(_syntax);

var _ramda = require("ramda");

var R = _interopRequireWildcard(_ramda);

var _ramdaFantasy = require("ramda-fantasy");

var _errors = require("./errors");

var _terms = require("./terms");

var _terms2 = _interopRequireDefault(_terms);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Just_492 = _ramdaFantasy.Maybe.Just;
var Nothing_493 = _ramdaFantasy.Maybe.Nothing;

var LSYNTAX_494 = { name: "left-syntax" };
var RSYNTAX_495 = { name: "right-syntax" };
var literalKeywords_496 = ["this", "null", "true", "false"];
var isLeftBracket_497 = R.whereEq({ type: _tokenizer.TokenType.LBRACK });
var isLeftBrace_498 = R.whereEq({ type: _tokenizer.TokenType.LBRACE });
var isLeftParen_499 = R.whereEq({ type: _tokenizer.TokenType.LPAREN });
var isRightBracket_500 = R.whereEq({ type: _tokenizer.TokenType.RBRACK });
var isRightBrace_501 = R.whereEq({ type: _tokenizer.TokenType.RBRACE });
var isRightParen_502 = R.whereEq({ type: _tokenizer.TokenType.RPAREN });
var isEOS_503 = R.whereEq({ type: _tokenizer.TokenType.EOS });
var isHash_504 = R.whereEq({ type: _tokenizer.TokenType.IDENTIFIER, value: "#" });
var isLeftSyntax_505 = R.whereEq({ type: LSYNTAX_494 });
var isRightSyntax_506 = R.whereEq({ type: RSYNTAX_495 });
var isLeftDelimiter_507 = R.anyPass([isLeftBracket_497, isLeftBrace_498, isLeftParen_499, isLeftSyntax_505]);
var isRightDelimiter_508 = R.anyPass([isRightBracket_500, isRightBrace_501, isRightParen_502, isRightSyntax_506]);
var isMatchingDelimiters_509 = R.cond([[isLeftBracket_497, function (__550, b_551) {
  return isRightBracket_500(b_551);
}], [isLeftBrace_498, function (__552, b_553) {
  return isRightBrace_501(b_553);
}], [isLeftParen_499, function (__554, b_555) {
  return isRightParen_502(b_555);
}], [isLeftSyntax_505, function (__556, b_557) {
  return isRightSyntax_506(b_557);
}], [R.T, R.F]]);
var assignOps_510 = ["=", "+=", "-=", "*=", "/=", "%=", "<<=", ">>=", ">>>=", "&=", "|=", "^=", ","];
var binaryOps_511 = ["+", "-", "*", "/", "%", "<<", ">>", ">>>", "&", "|", "^", "&&", "||", "?", ":", "===", "==", ">=", "<=", "<", ">", "!=", "!==", "instanceof"];
var unaryOps_512 = ["++", "--", "~", "!", "delete", "void", "typeof", "yield", "throw", "new"];
var isEmpty_513 = R.whereEq({ size: 0 });
var isPunctuator_514 = function isPunctuator_514(s_558) {
  return s_558.isPunctuator();
};
var isKeyword_515 = function isKeyword_515(s_559) {
  return s_559.isKeyword();
};
var isDelimiter_516 = function isDelimiter_516(s_560) {
  return s_560.isDelimiter();
};
var isParens_517 = function isParens_517(s_561) {
  return s_561.isParens();
};
var isBraces_518 = function isBraces_518(s_562) {
  return s_562.isBraces();
};
var isBrackets_519 = function isBrackets_519(s_563) {
  return s_563.isBrackets();
};
var isIdentifier_520 = function isIdentifier_520(s_564) {
  return s_564.isIdentifier();
};
var val_521 = function val_521(s_565) {
  return s_565.val();
};
var isVal_522 = R.curry(function (v_566, s_567) {
  return s_567.val() === v_566;
});
var isDot_523 = R.allPass([isPunctuator_514, isVal_522(".")]);
var isColon_524 = R.allPass([isPunctuator_514, isVal_522(":")]);
var isFunctionKeyword_525 = R.allPass([isKeyword_515, isVal_522("function")]);
var isOperator_526 = function isOperator_526(s_568) {
  return (s_568.isPunctuator() || s_568.isKeyword()) && R.any(R.equals(s_568.val()), assignOps_510.concat(binaryOps_511).concat(unaryOps_512));
};
var isNonLiteralKeyword_527 = R.allPass([isKeyword_515, function (s_569) {
  return R.none(R.equals(s_569.val()), literalKeywords_496);
}]);
var isKeywordExprPrefix_528 = R.allPass([isKeyword_515, function (s_570) {
  return R.any(R.equals(s_570.val()), ["instanceof", "typeof", "delete", "void", "yield", "throw", "new", "case"]);
}]);
var last_529 = function last_529(p_571) {
  return p_571.last();
};
var safeLast_530 = R.pipe(R.cond([[isEmpty_513, R.always(Nothing_493())], [R.T, R.compose(_ramdaFantasy.Maybe.of, last_529)]]));
var stuffTrue_531 = R.curry(function (p_572, b_573) {
  return b_573 ? Just_492(p_572) : Nothing_493();
});
var stuffFalse_532 = R.curry(function (p_574, b_575) {
  return !b_575 ? Just_492(p_574) : Nothing_493();
});
var isTopColon_533 = R.pipe(safeLast_530, R.map(isColon_524), _ramdaFantasy.Maybe.maybe(false, R.identity));
var isTopPunctuator_534 = R.pipe(safeLast_530, R.map(isPunctuator_514), _ramdaFantasy.Maybe.maybe(false, R.identity));
var isExprReturn_535 = R.curry(function (l_576, p_577) {
  var retKwd_578 = safeLast_530(p_577);
  var maybeDot_579 = pop_546(p_577).chain(safeLast_530);
  if (maybeDot_579.map(isDot_523).getOrElse(false)) {
    return true;
  }
  return retKwd_578.map(function (s_580) {
    return s_580.isKeyword() && s_580.val() === "return" && s_580.lineNumber() === l_576;
  }).getOrElse(false);
});
var isTopOperator_536 = R.pipe(safeLast_530, R.map(isOperator_526), _ramdaFantasy.Maybe.maybe(false, R.identity));
var isTopKeywordExprPrefix_537 = R.pipe(safeLast_530, R.map(isKeywordExprPrefix_528), _ramdaFantasy.Maybe.maybe(false, R.identity));
var isExprPrefix_538 = R.curry(function (l_581, b_582) {
  return R.cond([[isEmpty_513, R.always(b_582)], [isTopColon_533, R.always(b_582)], [isTopKeywordExprPrefix_537, R.T], [isTopOperator_536, R.T], [isTopPunctuator_534, R.always(b_582)], [isExprReturn_535(l_581), R.T], [R.T, R.F]]);
});
var curly_539 = function curly_539(p_583) {
  return safeLast_530(p_583).map(isBraces_518).chain(stuffTrue_531(p_583));
};
var paren_540 = function paren_540(p_584) {
  return safeLast_530(p_584).map(isParens_517).chain(stuffTrue_531(p_584));
};
var func_541 = function func_541(p_585) {
  return safeLast_530(p_585).map(isFunctionKeyword_525).chain(stuffTrue_531(p_585));
};
var ident_542 = function ident_542(p_586) {
  return safeLast_530(p_586).map(isIdentifier_520).chain(stuffTrue_531(p_586));
};
var nonLiteralKeyword_543 = function nonLiteralKeyword_543(p_587) {
  return safeLast_530(p_587).map(isNonLiteralKeyword_527).chain(stuffTrue_531(p_587));
};
var opt_544 = R.curry(function (a_588, b_589, p_590) {
  var result_591 = R.pipeK(a_588, b_589)(_ramdaFantasy.Maybe.of(p_590));
  return _ramdaFantasy.Maybe.isJust(result_591) ? result_591 : _ramdaFantasy.Maybe.of(p_590);
});
var notDot_545 = R.ifElse(R.whereEq({ size: 0 }), Just_492, function (p_592) {
  return safeLast_530(p_592).map(function (s_593) {
    return !(s_593.isPunctuator() && s_593.val() === ".");
  }).chain(stuffTrue_531(p_592));
});
var pop_546 = R.compose(Just_492, function (p_594) {
  return p_594.pop();
});
var functionPrefix_547 = R.pipeK(curly_539, pop_546, paren_540, pop_546, opt_544(ident_542, pop_546), func_541);
var isRegexPrefix_548 = function isRegexPrefix_548(b_595) {
  return R.anyPass([isEmpty_513, isTopPunctuator_534, R.pipe(_ramdaFantasy.Maybe.of, R.pipeK(nonLiteralKeyword_543, pop_546, notDot_545), _ramdaFantasy.Maybe.isJust), R.pipe(_ramdaFantasy.Maybe.of, R.pipeK(paren_540, pop_546, nonLiteralKeyword_543, pop_546, notDot_545), _ramdaFantasy.Maybe.isJust), R.pipe(_ramdaFantasy.Maybe.of, functionPrefix_547, R.chain(function (p_596) {
    return safeLast_530(p_596).map(function (s_597) {
      return s_597.lineNumber();
    }).chain(function (fnLine_598) {
      return pop_546(p_596).map(isExprPrefix_538(fnLine_598, b_595));
    }).chain(stuffFalse_532(p_596));
  }), _ramdaFantasy.Maybe.isJust), function (p_599) {
    var isCurly_600 = _ramdaFantasy.Maybe.isJust(safeLast_530(p_599).map(isBraces_518));
    var alreadyCheckedFunction_601 = R.pipe(_ramdaFantasy.Maybe.of, functionPrefix_547, _ramdaFantasy.Maybe.isJust)(p_599);
    if (alreadyCheckedFunction_601) {
      return false;
    }
    return R.pipe(_ramdaFantasy.Maybe.of, R.chain(curly_539), R.chain(function (p_602) {
      return safeLast_530(p_602).map(function (s_603) {
        return s_603.lineNumber();
      }).chain(function (curlyLine_604) {
        return pop_546(p_602).map(isExprPrefix_538(curlyLine_604, b_595));
      }).chain(stuffFalse_532(p_602));
    }), _ramdaFantasy.Maybe.isJust)(p_599);
  }]);
};
function lastEl_549(l_605) {
  return l_605[l_605.length - 1];
}

var Reader = (function (_Tokenizer) {
  _inherits(Reader, _Tokenizer);

  function Reader(strings_606, context_607, replacements_608) {
    _classCallCheck(this, Reader);

    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(Reader).call(this, Array.isArray(strings_606) ? strings_606.join("") : strings_606));

    _this.delimStack = new Map();
    _this.insideSyntaxTemplate = [false];
    _this.context = context_607;
    if (Array.isArray(strings_606)) {
      (function () {
        var totalIndex = 0;
        _this.replacementIndex = R.reduce(function (acc_609, strRep_610) {
          acc_609.push({ index: totalIndex + strRep_610[0].length, replacement: strRep_610[1] });
          totalIndex += strRep_610[0].length;
          return acc_609;
        }, [], R.zip(strings_606, replacements_608));
      })();
    }
    return _this;
  }

  _createClass(Reader, [{
    key: "read",
    value: function read() {
      var stack_611 = arguments.length <= 0 || arguments[0] === undefined ? [] : arguments[0];
      var b_612 = arguments.length <= 1 || arguments[1] === undefined ? false : arguments[1];
      var singleDelimiter_613 = arguments.length <= 2 || arguments[2] === undefined ? false : arguments[2];

      var prefix_614 = (0, _immutable.List)();
      while (true) {
        var tok = this.advance(prefix_614, b_612);
        if (tok instanceof _syntax2.default || tok instanceof _terms2.default) {
          stack_611.push(tok);
          continue;
        }
        if (Array.isArray(tok)) {
          Array.prototype.push.apply(stack_611, tok);
          continue;
        }
        if (_immutable.List.isList(tok)) {
          Array.prototype.push.apply(stack_611, tok.toArray());
          continue;
        }
        if (isEOS_503(tok)) {
          if (stack_611[0] && isLeftDelimiter_507(stack_611[0].token)) {
            throw this.createUnexpected(tok);
          }
          break;
        }
        if (isLeftDelimiter_507(tok)) {
          if (isLeftSyntax_505(tok)) {
            this.insideSyntaxTemplate.push(true);
          }
          var line = tok.slice.startLocation.line;
          var innerB = isLeftBrace_498(tok) ? isExprPrefix_538(line, b_612)(prefix_614) : true;
          var inner = this.read([new _syntax2.default(tok)], innerB, false);
          var stx = new _syntax2.default(inner, this.context);
          prefix_614 = prefix_614.concat(stx);
          stack_611.push(stx);
          if (singleDelimiter_613) {
            break;
          }
        } else if (isRightDelimiter_508(tok)) {
          if (stack_611[0] && !isMatchingDelimiters_509(stack_611[0].token, tok)) {
            throw this.createUnexpected(tok);
          }
          var stx = new _syntax2.default(tok, this.context);
          stack_611.push(stx);
          if (lastEl_549(this.insideSyntaxTemplate) && isRightSyntax_506(tok)) {
            this.insideSyntaxTemplate.pop();
          }
          break;
        } else {
          var stx = new _syntax2.default(tok, this.context);
          prefix_614 = prefix_614.concat(stx);
          stack_611.push(stx);
        }
      }
      return (0, _immutable.List)(stack_611);
    }
  }, {
    key: "advance",
    value: function advance(prefix_615, b_616) {
      var startLocation_617 = this.getLocation();
      this.lastIndex = this.index;
      this.lastLine = this.line;
      this.lastLineStart = this.lineStart;
      this.skipComment();
      this.startIndex = this.index;
      this.startLine = this.line;
      this.startLineStart = this.lineStart;
      if (this.replacementIndex && this.replacementIndex[0] && this.index >= this.replacementIndex[0].index) {
        var rep = this.replacementIndex[0].replacement;
        this.replacementIndex.shift();
        return rep;
      }
      var charCode_618 = this.source.charCodeAt(this.index);
      if (charCode_618 === 96) {
        var element = undefined,
            items = [];
        var _startLocation_ = this.getLocation();
        var start = this.index;
        this.index++;
        if (lastEl_549(this.insideSyntaxTemplate)) {
          var slice = this.getSlice(start, _startLocation_);
          return { type: RSYNTAX_495, value: "`", slice: slice };
        }
        do {
          element = this.scanTemplateElement();
          items.push(element);
          if (element.interp) {
            element = this.read([], false, true);
            (0, _errors.assert)(element.size === 1, "should only have read a single delimiter inside a template");
            items.push(element.get(0));
          }
        } while (!element.tail);
        return { type: _tokenizer.TokenType.TEMPLATE, items: (0, _immutable.List)(items) };
      } else if (charCode_618 === 35) {
        var _startLocation_2 = this.getLocation();
        var start = this.index;
        var slice = this.getSlice(start, _startLocation_2);
        this.index++;
        if (this.source.charCodeAt(this.index) === 96) {
          this.index++;
          return { type: LSYNTAX_494, value: "#`", slice: slice };
        }
        return { type: _tokenizer.TokenType.IDENTIFIER, value: "#", slice: slice };
      }
      var lookahead_619 = _get(Object.getPrototypeOf(Reader.prototype), "advance", this).call(this);
      if (lookahead_619.type === _tokenizer.TokenType.DIV && isRegexPrefix_548(b_616)(prefix_615)) {
        return _get(Object.getPrototypeOf(Reader.prototype), "scanRegExp", this).call(this, "/");
      }
      return lookahead_619;
    }
  }, {
    key: "scanTemplateElement",
    value: function scanTemplateElement() {
      var startLocation_620 = this.getLocation();
      var start_621 = this.index;
      while (this.index < this.source.length) {
        var ch = this.source.charCodeAt(this.index);
        switch (ch) {
          case 96:
            var slice = this.getSlice(start_621, startLocation_620);
            this.index++;
            return { type: _tokenizer.TokenType.TEMPLATE, tail: true, interp: false, slice: slice };
          case 36:
            if (this.source.charCodeAt(this.index + 1) === 123) {
              var _slice = this.getSlice(start_621, startLocation_620);
              this.index += 1;
              return { type: _tokenizer.TokenType.TEMPLATE, tail: false, interp: true, slice: _slice };
            }
            this.index++;
            break;
          case 92:
            {
              var octal = this.scanStringEscape("", null)[1];
              if (octal != null) {
                throw this.createILLEGAL();
              }
              break;
            }
          default:
            this.index++;
        }
      }
      throw this.createILLEGAL();
    }
  }]);

  return Reader;
})(_tokenizer2.default);

exports.default = Reader;
//# sourceMappingURL=data:application/json;base64,