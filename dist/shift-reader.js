"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _tokenizer = require("shift-parser/dist/tokenizer");

var _tokenizer2 = _interopRequireDefault(_tokenizer);

var _immutable = require("immutable");

var _syntax = require("./syntax");

var _syntax2 = _interopRequireDefault(_syntax);

var _ramda = require("ramda");

var R = _interopRequireWildcard(_ramda);

var _ramdaFantasy = require("ramda-fantasy");

var _errors = require("./errors");

var _terms = require("./terms");

var _terms2 = _interopRequireDefault(_terms);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Just_488 = _ramdaFantasy.Maybe.Just;
var Nothing_489 = _ramdaFantasy.Maybe.Nothing;

var LSYNTAX_490 = { name: "left-syntax" };
var RSYNTAX_491 = { name: "right-syntax" };
var AT_492 = { klass: _tokenizer.TokenClass.Punctuator, name: "@" };
var literalKeywords_493 = ["this", "null", "true", "false"];
var isLeftBracket_494 = R.whereEq({ type: _tokenizer.TokenType.LBRACK });
var isLeftBrace_495 = R.whereEq({ type: _tokenizer.TokenType.LBRACE });
var isLeftParen_496 = R.whereEq({ type: _tokenizer.TokenType.LPAREN });
var isRightBracket_497 = R.whereEq({ type: _tokenizer.TokenType.RBRACK });
var isRightBrace_498 = R.whereEq({ type: _tokenizer.TokenType.RBRACE });
var isRightParen_499 = R.whereEq({ type: _tokenizer.TokenType.RPAREN });
var isEOS_500 = R.whereEq({ type: _tokenizer.TokenType.EOS });
var isHash_501 = R.whereEq({ type: _tokenizer.TokenType.IDENTIFIER, value: "#" });
var isLeftSyntax_502 = R.whereEq({ type: LSYNTAX_490 });
var isRightSyntax_503 = R.whereEq({ type: RSYNTAX_491 });
var isLeftDelimiter_504 = R.anyPass([isLeftBracket_494, isLeftBrace_495, isLeftParen_496, isLeftSyntax_502]);
var isRightDelimiter_505 = R.anyPass([isRightBracket_497, isRightBrace_498, isRightParen_499, isRightSyntax_503]);
var isMatchingDelimiters_506 = R.cond([[isLeftBracket_494, function (__547, b_548) {
  return isRightBracket_497(b_548);
}], [isLeftBrace_495, function (__549, b_550) {
  return isRightBrace_498(b_550);
}], [isLeftParen_496, function (__551, b_552) {
  return isRightParen_499(b_552);
}], [isLeftSyntax_502, function (__553, b_554) {
  return isRightSyntax_503(b_554);
}], [R.T, R.F]]);
var assignOps_507 = ["=", "+=", "-=", "*=", "/=", "%=", "<<=", ">>=", ">>>=", "&=", "|=", "^=", ","];
var binaryOps_508 = ["+", "-", "*", "/", "%", "<<", ">>", ">>>", "&", "|", "^", "&&", "||", "?", ":", "===", "==", ">=", "<=", "<", ">", "!=", "!==", "instanceof"];
var unaryOps_509 = ["++", "--", "~", "!", "delete", "void", "typeof", "yield", "throw", "new"];
var isEmpty_510 = R.whereEq({ size: 0 });
var isPunctuator_511 = function isPunctuator_511(s_555) {
  return s_555.isPunctuator();
};
var isKeyword_512 = function isKeyword_512(s_556) {
  return s_556.isKeyword();
};
var isDelimiter_513 = function isDelimiter_513(s_557) {
  return s_557.isDelimiter();
};
var isParens_514 = function isParens_514(s_558) {
  return s_558.isParens();
};
var isBraces_515 = function isBraces_515(s_559) {
  return s_559.isBraces();
};
var isBrackets_516 = function isBrackets_516(s_560) {
  return s_560.isBrackets();
};
var isIdentifier_517 = function isIdentifier_517(s_561) {
  return s_561.isIdentifier();
};
var val_518 = function val_518(s_562) {
  return s_562.val();
};
var isVal_519 = R.curry(function (v_563, s_564) {
  return s_564.val() === v_563;
});
var isDot_520 = R.allPass([isPunctuator_511, isVal_519(".")]);
var isColon_521 = R.allPass([isPunctuator_511, isVal_519(":")]);
var isFunctionKeyword_522 = R.allPass([isKeyword_512, isVal_519("function")]);
var isOperator_523 = function isOperator_523(s_565) {
  return (s_565.isPunctuator() || s_565.isKeyword()) && R.any(R.equals(s_565.val()), assignOps_507.concat(binaryOps_508).concat(unaryOps_509));
};
var isNonLiteralKeyword_524 = R.allPass([isKeyword_512, function (s_566) {
  return R.none(R.equals(s_566.val()), literalKeywords_493);
}]);
var isKeywordExprPrefix_525 = R.allPass([isKeyword_512, function (s_567) {
  return R.any(R.equals(s_567.val()), ["instanceof", "typeof", "delete", "void", "yield", "throw", "new", "case"]);
}]);
var last_526 = function last_526(p_568) {
  return p_568.last();
};
var safeLast_527 = R.pipe(R.cond([[isEmpty_510, R.always(Nothing_489())], [R.T, R.compose(_ramdaFantasy.Maybe.of, last_526)]]));
var stuffTrue_528 = R.curry(function (p_569, b_570) {
  return b_570 ? Just_488(p_569) : Nothing_489();
});
var stuffFalse_529 = R.curry(function (p_571, b_572) {
  return !b_572 ? Just_488(p_571) : Nothing_489();
});
var isTopColon_530 = R.pipe(safeLast_527, R.map(isColon_521), _ramdaFantasy.Maybe.maybe(false, R.identity));
var isTopPunctuator_531 = R.pipe(safeLast_527, R.map(isPunctuator_511), _ramdaFantasy.Maybe.maybe(false, R.identity));
var isExprReturn_532 = R.curry(function (l_573, p_574) {
  var retKwd_575 = safeLast_527(p_574);
  var maybeDot_576 = pop_543(p_574).chain(safeLast_527);
  if (maybeDot_576.map(isDot_520).getOrElse(false)) {
    return true;
  }
  return retKwd_575.map(function (s_577) {
    return s_577.isKeyword() && s_577.val() === "return" && s_577.lineNumber() === l_573;
  }).getOrElse(false);
});
var isTopOperator_533 = R.pipe(safeLast_527, R.map(isOperator_523), _ramdaFantasy.Maybe.maybe(false, R.identity));
var isTopKeywordExprPrefix_534 = R.pipe(safeLast_527, R.map(isKeywordExprPrefix_525), _ramdaFantasy.Maybe.maybe(false, R.identity));
var isExprPrefix_535 = R.curry(function (l_578, b_579) {
  return R.cond([[isEmpty_510, R.always(b_579)], [isTopColon_530, R.always(b_579)], [isTopKeywordExprPrefix_534, R.T], [isTopOperator_533, R.T], [isTopPunctuator_531, R.always(b_579)], [isExprReturn_532(l_578), R.T], [R.T, R.F]]);
});
var curly_536 = function curly_536(p_580) {
  return safeLast_527(p_580).map(isBraces_515).chain(stuffTrue_528(p_580));
};
var paren_537 = function paren_537(p_581) {
  return safeLast_527(p_581).map(isParens_514).chain(stuffTrue_528(p_581));
};
var func_538 = function func_538(p_582) {
  return safeLast_527(p_582).map(isFunctionKeyword_522).chain(stuffTrue_528(p_582));
};
var ident_539 = function ident_539(p_583) {
  return safeLast_527(p_583).map(isIdentifier_517).chain(stuffTrue_528(p_583));
};
var nonLiteralKeyword_540 = function nonLiteralKeyword_540(p_584) {
  return safeLast_527(p_584).map(isNonLiteralKeyword_524).chain(stuffTrue_528(p_584));
};
var opt_541 = R.curry(function (a_585, b_586, p_587) {
  var result_588 = R.pipeK(a_585, b_586)(_ramdaFantasy.Maybe.of(p_587));
  return _ramdaFantasy.Maybe.isJust(result_588) ? result_588 : _ramdaFantasy.Maybe.of(p_587);
});
var notDot_542 = R.ifElse(R.whereEq({ size: 0 }), Just_488, function (p_589) {
  return safeLast_527(p_589).map(function (s_590) {
    return !(s_590.isPunctuator() && s_590.val() === ".");
  }).chain(stuffTrue_528(p_589));
});
var pop_543 = R.compose(Just_488, function (p_591) {
  return p_591.pop();
});
var functionPrefix_544 = R.pipeK(curly_536, pop_543, paren_537, pop_543, opt_541(ident_539, pop_543), func_538);
var isRegexPrefix_545 = function isRegexPrefix_545(b_592) {
  return R.anyPass([isEmpty_510, isTopPunctuator_531, R.pipe(_ramdaFantasy.Maybe.of, R.pipeK(nonLiteralKeyword_540, pop_543, notDot_542), _ramdaFantasy.Maybe.isJust), R.pipe(_ramdaFantasy.Maybe.of, R.pipeK(paren_537, pop_543, nonLiteralKeyword_540, pop_543, notDot_542), _ramdaFantasy.Maybe.isJust), R.pipe(_ramdaFantasy.Maybe.of, functionPrefix_544, R.chain(function (p_593) {
    return safeLast_527(p_593).map(function (s_594) {
      return s_594.lineNumber();
    }).chain(function (fnLine_595) {
      return pop_543(p_593).map(isExprPrefix_535(fnLine_595, b_592));
    }).chain(stuffFalse_529(p_593));
  }), _ramdaFantasy.Maybe.isJust), function (p_596) {
    var isCurly_597 = _ramdaFantasy.Maybe.isJust(safeLast_527(p_596).map(isBraces_515));
    var alreadyCheckedFunction_598 = R.pipe(_ramdaFantasy.Maybe.of, functionPrefix_544, _ramdaFantasy.Maybe.isJust)(p_596);
    if (alreadyCheckedFunction_598) {
      return false;
    }
    return R.pipe(_ramdaFantasy.Maybe.of, R.chain(curly_536), R.chain(function (p_599) {
      return safeLast_527(p_599).map(function (s_600) {
        return s_600.lineNumber();
      }).chain(function (curlyLine_601) {
        return pop_543(p_599).map(isExprPrefix_535(curlyLine_601, b_592));
      }).chain(stuffFalse_529(p_599));
    }), _ramdaFantasy.Maybe.isJust)(p_596);
  }]);
};
function lastEl_546(l_602) {
  return l_602[l_602.length - 1];
}

var Reader = (function (_Tokenizer) {
  _inherits(Reader, _Tokenizer);

  function Reader(strings_603, context_604, replacements_605) {
    _classCallCheck(this, Reader);

    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(Reader).call(this, Array.isArray(strings_603) ? strings_603.join("") : strings_603));

    _this.delimStack = new Map();
    _this.insideSyntaxTemplate = [false];
    _this.context = context_604;
    if (Array.isArray(strings_603)) {
      (function () {
        var totalIndex = 0;
        _this.replacementIndex = R.reduce(function (acc_606, strRep_607) {
          acc_606.push({ index: totalIndex + strRep_607[0].length, replacement: strRep_607[1] });
          totalIndex += strRep_607[0].length;
          return acc_606;
        }, [], R.zip(strings_603, replacements_605));
      })();
    }
    return _this;
  }

  _createClass(Reader, [{
    key: "read",
    value: function read() {
      var stack_608 = arguments.length <= 0 || arguments[0] === undefined ? [] : arguments[0];
      var b_609 = arguments.length <= 1 || arguments[1] === undefined ? false : arguments[1];
      var singleDelimiter_610 = arguments.length <= 2 || arguments[2] === undefined ? false : arguments[2];

      var prefix_611 = (0, _immutable.List)();
      while (true) {
        var tok = this.advance(prefix_611, b_609);
        if (tok instanceof _syntax2.default || tok instanceof _terms2.default) {
          stack_608.push(tok);
          continue;
        }
        if (Array.isArray(tok)) {
          Array.prototype.push.apply(stack_608, tok);
          continue;
        }
        if (_immutable.List.isList(tok)) {
          Array.prototype.push.apply(stack_608, tok.toArray());
          continue;
        }
        if (isEOS_500(tok)) {
          if (stack_608[0] && isLeftDelimiter_504(stack_608[0].token)) {
            throw this.createUnexpected(tok);
          }
          break;
        }
        if (isLeftDelimiter_504(tok)) {
          if (isLeftSyntax_502(tok)) {
            this.insideSyntaxTemplate.push(true);
          }
          var line = tok.slice.startLocation.line;
          var innerB = isLeftBrace_495(tok) ? isExprPrefix_535(line, b_609)(prefix_611) : true;
          var inner = this.read([new _syntax2.default(tok)], innerB, false);
          var stx = new _syntax2.default(inner, this.context);
          prefix_611 = prefix_611.concat(stx);
          stack_608.push(stx);
          if (singleDelimiter_610) {
            break;
          }
        } else if (isRightDelimiter_505(tok)) {
          if (stack_608[0] && !isMatchingDelimiters_506(stack_608[0].token, tok)) {
            throw this.createUnexpected(tok);
          }
          var stx = new _syntax2.default(tok, this.context);
          stack_608.push(stx);
          if (lastEl_546(this.insideSyntaxTemplate) && isRightSyntax_503(tok)) {
            this.insideSyntaxTemplate.pop();
          }
          break;
        } else {
          var stx = new _syntax2.default(tok, this.context);
          prefix_611 = prefix_611.concat(stx);
          stack_608.push(stx);
        }
      }
      return (0, _immutable.List)(stack_608);
    }
  }, {
    key: "advance",
    value: function advance(prefix_612, b_613) {
      var startLocation_614 = this.getLocation();
      this.lastIndex = this.index;
      this.lastLine = this.line;
      this.lastLineStart = this.lineStart;
      this.skipComment();
      this.startIndex = this.index;
      this.startLine = this.line;
      this.startLineStart = this.lineStart;
      if (this.replacementIndex && this.replacementIndex[0] && this.index >= this.replacementIndex[0].index) {
        var rep = this.replacementIndex[0].replacement;
        this.replacementIndex.shift();
        return rep;
      }
      var charCode_615 = this.source.charCodeAt(this.index);
      if (charCode_615 === 96) {
        var element = undefined,
            items = [];
        var _startLocation_ = this.getLocation();
        var start = this.index;
        this.index++;
        if (lastEl_546(this.insideSyntaxTemplate)) {
          var slice = this.getSlice(start, _startLocation_);
          return { type: RSYNTAX_491, value: "`", slice: slice };
        }
        do {
          element = this.scanTemplateElement();
          items.push(element);
          if (element.interp) {
            element = this.read([], false, true);
            (0, _errors.assert)(element.size === 1, "should only have read a single delimiter inside a template");
            items.push(element.get(0));
          }
        } while (!element.tail);
        return { type: _tokenizer.TokenType.TEMPLATE, items: (0, _immutable.List)(items) };
      } else if (charCode_615 === 35) {
        var _startLocation_2 = this.getLocation();
        var start = this.index;
        var slice = this.getSlice(start, _startLocation_2);
        this.index++;
        if (this.source.charCodeAt(this.index) === 96) {
          this.index++;
          return { type: LSYNTAX_490, value: "#`", slice: slice };
        }
        return { type: _tokenizer.TokenType.IDENTIFIER, value: "#", slice: slice };
      } else if (charCode_615 === 64) {
        var _startLocation_3 = this.getLocation();
        var start = this.index;
        var slice = this.getSlice(start, _startLocation_3);
        this.index++;
        return { type: AT_492, value: "@", slice: slice };
      }
      var lookahead_616 = _get(Object.getPrototypeOf(Reader.prototype), "advance", this).call(this);
      if (lookahead_616.type === _tokenizer.TokenType.DIV && isRegexPrefix_545(b_613)(prefix_612)) {
        return _get(Object.getPrototypeOf(Reader.prototype), "scanRegExp", this).call(this, "/");
      }
      return lookahead_616;
    }
  }, {
    key: "scanTemplateElement",
    value: function scanTemplateElement() {
      var startLocation_617 = this.getLocation();
      var start_618 = this.index;
      while (this.index < this.source.length) {
        var ch = this.source.charCodeAt(this.index);
        switch (ch) {
          case 96:
            var slice = this.getSlice(start_618, startLocation_617);
            this.index++;
            return { type: _tokenizer.TokenType.TEMPLATE, tail: true, interp: false, slice: slice };
          case 36:
            if (this.source.charCodeAt(this.index + 1) === 123) {
              var _slice = this.getSlice(start_618, startLocation_617);
              this.index += 1;
              return { type: _tokenizer.TokenType.TEMPLATE, tail: false, interp: true, slice: _slice };
            }
            this.index++;
            break;
          case 92:
            {
              var octal = this.scanStringEscape("", null)[1];
              if (octal != null) {
                throw this.createILLEGAL();
              }
              break;
            }
          default:
            this.index++;
        }
      }
      throw this.createILLEGAL();
    }
  }]);

  return Reader;
})(_tokenizer2.default);

exports.default = Reader;
//# sourceMappingURL=data:application/json;base64,