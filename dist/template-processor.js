"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.processTemplate = processTemplate;
exports.replaceTemplate = replaceTemplate;

var _immutable = require("immutable");

var _ramdaFantasy = require("ramda-fantasy");

var _ramda = require("ramda");

var _ramda2 = _interopRequireDefault(_ramda);

var _syntax = require("./syntax");

var _syntax2 = _interopRequireDefault(_syntax);

var _errors = require("./errors");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var isDolar_701 = function isDolar_701(s_710) {
  return s_710 && s_710 instanceof _syntax2.default && s_710.isIdentifier() && s_710.val() === "$";
};
var isDelimiter_702 = function isDelimiter_702(s_711) {
  return s_711 && typeof s_711.isDelimiter === "function" && s_711.isDelimiter();
};
var isBraces_703 = function isBraces_703(s_712) {
  return s_712 && typeof s_712.isBraces === "function" && s_712.isBraces();
};
var isParens_704 = function isParens_704(s_713) {
  return s_713 && typeof s_713.isParens === "function" && s_713.isParens();
};
var isBrackets_705 = function isBrackets_705(s_714) {
  return s_714 && typeof s_714.isBrackets === "function" && s_714.isBrackets();
};
var insertIntoDelimiter_706 = _ramda2.default.cond([[isBraces_703, function (s_715, r_716) {
  return _syntax2.default.fromBraces(r_716, s_715);
}], [isParens_704, function (s_717, r_718) {
  return _syntax2.default.fromParens(r_718, s_717);
}], [isBrackets_705, function (s_719, r_720) {
  return _syntax2.default.fromBrackets(r_720, s_719);
}]]);
var process_707 = function process_707(acc_721, s_722) {
  if (isBraces_703(s_722) && isDolar_701(acc_721.template.last())) {
    return { template: acc_721.template.push(_syntax2.default.fromBraces(_immutable.List.of(_syntax2.default.fromNumber(acc_721.interp.size)), s_722)), interp: acc_721.interp.push(s_722.inner()) };
  } else if (isDelimiter_702(s_722)) {
    var innerResult = processTemplate(s_722.inner(), acc_721.interp);
    return { template: acc_721.template.push(insertIntoDelimiter_706(s_722, innerResult.template)), interp: innerResult.interp };
  } else {
    return { template: acc_721.template.push(s_722), interp: acc_721.interp };
  }
};
function cloneLineNumber_708(to_723, from_724) {
  if (from_724 && to_723 && typeof to_723.setLineNumber === "function") {
    return to_723.setLineNumber(from_724.lineNumber());
  }
  return to_723;
}
var replace_709 = function replace_709(acc_725, s_726) {
  var last_727 = acc_725.template.get(-1);
  var beforeLast_728 = acc_725.template.get(-2);
  if (isBraces_703(s_726) && isDolar_701(last_727)) {
    var index = s_726.inner().first().val();
    (0, _errors.assert)(acc_725.rep.size > index, "unknown replacement value");
    var replacement = cloneLineNumber_708(acc_725.rep.get(index), beforeLast_728);
    return { template: acc_725.template.pop().concat(replacement), rep: acc_725.rep };
  } else if (isDelimiter_702(s_726)) {
    var innerResult = replaceTemplate(s_726.inner(), acc_725.rep);
    return { template: acc_725.template.push(insertIntoDelimiter_706(s_726, innerResult)), rep: acc_725.rep };
  } else {
    return { template: acc_725.template.push(s_726), rep: acc_725.rep };
  }
};
function processTemplate(temp_729) {
  var interp_730 = arguments.length <= 1 || arguments[1] === undefined ? (0, _immutable.List)() : arguments[1];

  return temp_729.reduce(process_707, { template: (0, _immutable.List)(), interp: interp_730 });
}
function replaceTemplate(temp_731, rep_732) {
  return temp_731.reduce(replace_709, { template: (0, _immutable.List)(), rep: rep_732 }).template;
}
//# sourceMappingURL=data:application/json;base64,